#include <iostream>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <map>
#include <set>
void dfs(int& timer, std::set<int>& articulation_point, std::vector<int>& ret, std::vector<int>& tin, std::vector<int>& tout, std::vector<std::vector<int>>& g, std::vector<int>& color, int v, int p){
    int how_many_children = 0;
    tin[v] = timer++;
    ret[v] = tin[v];
    color[v] = 1;
    for (int to : g[v]) {
        if (to == p) continue;
        if (color[to] != 0) ret[v] = std::min(ret[v], tin[to]);
        else {
            dfs(timer, articulation_point, ret, tin, tout, g, color, to, v);
            how_many_children++;
            if (p != -1) {
                if (ret[to] >= tin[v]) {
                    articulation_point.insert(v);
                }
            }
            else if (how_many_children >= 2) {
                articulation_point.insert(v);
            }
            ret[v] = std::min(ret[v], ret[to]);
        }
        
    }
}
 
int main()
{
    int n;
    std::cin >> n;  
    int m;
    std::cin >> m;
    std::vector<std::vector<int>> g(n + 1);
    std::vector<std::pair<int, int>> edges;
    for (int i = 1; i <= m; i++) {
        int x,y;
        std::cin >> x>>y;
        edges.push_back({ x,y });
        g[x].push_back(y);
        g[y].push_back(x);
    }
 
    std::vector<int> color(n + 1, 0);
    std::vector<int> par(n + 1, 0);
    std::vector<int> tout(n + 1, 0);
    std::vector<int> tin(n + 1, 0);
    std::vector<int> ret(n + 1, 0);
    int timer = 1;
 
    std::set<int> articulation_point;
    for (int i = 1; i <= n; i++) {
        if (color[i] == 0 || g[i].size()==0) {
            dfs(timer, articulation_point, ret, tin, tout, g, color, i, -1);
        }
    }
    std::cout << articulation_point.size() << '\n';
    for (auto i: articulation_point) {
        std::cout << i << ' ';
    }
    return 0;
}
