#include <iostream>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>

void main_work(int n, std::vector<std::vector<long long>>& m_s) {
    std::vector < std::vector<std::pair<long long, int>>> dp(n, std::vector < std::pair<long long, int>>(pow(2, n), { 15 * 100000000,-1 }));
    for (int i = 0; i < n; i++) {
        dp[i][pow(2, i)].first = 0;
    }
    for (long long mask = 1; mask < pow(2, n); mask++) {
        for (int v = 0; v < n; v++) {
            for (int u = 0; u < n; u++) {
                if (mask >> u & 1) continue;
                long long newmask = mask | (1 << u);
                if (dp[u][newmask].first > dp[v][mask].first + m_s[v][u]) {
                    dp[u][newmask].first = dp[v][mask].first + m_s[v][u];
                    dp[u][newmask].second = v;
                }
            }
        }
    }
    long long ans = 15 * 100000000;
    int ind = 0;
    for (int i = 0; i < n; i++) {
        if (ans >= dp[i][pow(2, n) - 1].first) {
            ans = dp[i][pow(2, n) - 1].first;
            ind = i;
        }
    }
    std::cout << ans << '\n';
    long long mask = pow(2, n) - 1;
    while (ind != -1) {
        std::cout << ind + 1 << ' ';
        int temp = dp[ind][mask].second;
        mask ^= (0 ^ mask) & (1 << ind);
        ind = temp;
    }
}

int main()
{
    int n;
    std::cin >> n;
    std::vector<std::vector<long long>> m_s(n, std::vector<long long>(n, 0));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            long long x;
            std::cin >> x;
            m_s[i][j] = x;
        }
    }
    main_work(n, m_s);
    return 0;
}
